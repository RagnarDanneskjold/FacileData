% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assay-data.R
\name{fetch_assay_data.FacileDataSet}
\alias{fetch_assay_data.FacileDataSet}
\alias{fetch_assay_data.facile_frame}
\alias{normalize.assay.matrix}
\title{Fetch data from single assay of choice}
\usage{
\method{fetch_assay_data}{FacileDataSet}(x, features, samples = NULL,
  assay_name = default_assay(x), normalized = FALSE,
  as.matrix = FALSE, ..., subset.threshold = 700, aggregate = FALSE,
  aggregate.by = "ewm", verbose = FALSE)

\method{fetch_assay_data}{facile_frame}(x, features, samples = NULL,
  assay_name = NULL, normalized = FALSE, as.matrix = FALSE, ...,
  subset.threshold = 700, aggregate = FALSE, aggregate.by = "ewm",
  verbose = FALSE)

normalize.assay.matrix(vals, feature.info, sample.info, fds, log = TRUE,
  prior.count = 1, batch = NULL, verbose = FALSE, ...)
}
\arguments{
\item{x}{A \code{FacileDataSrote} object.}

\item{features}{a feature descriptor (data.frame with assay and feature_id
columms)}

\item{samples}{a sample descriptor to specify which samples to return data
from.}

\item{assay_name}{the name of the assay to fetch data from. Defaults to the
value of \code{\link[=default_assay]{default_assay()}} for \code{x}. Must be a subset of \code{assay_names(x)}.}

\item{normalized}{return normalize or raw data values, defaults to
\code{raw}}

\item{as.matrix}{by default, the data is returned in a long-form tbl-like
result. If set to \code{TRUE}, the data is returned as a matrix.}

\item{...}{parameters to pass to normalization methods}

\item{subset.threshold}{sometimes fetching all the genes is faster than
trying to subset. We have to figure out why that is, but I've previously
tested random features of different lengths, and around 700 features was
the elbow.}

\item{aggregate.by}{do you want individual level results or geneset
scores? Use 'ewm' for eigenWeightedMean, and that's all.}
}
\value{
A \code{tibble} (lazy or not) with assay data.
}
\description{
Fetch data from single assay of choice
}
\section{Removing Batch Effects}{

When normalized data is returned, we assume these data are log-like, and you
have the option to regress out batch effects using our
\code{\link[=remove_batch_effect]{remove_batch_effect()}} wrapper to \code{\link[limma:removeBatchEffect]{limma::removeBatchEffect()}}.
}

\examples{
samples <- exampleFacileDataSet() \%>\%
  filter_samples(indication == "BLCA", sample_type == "tumor")
features <- c(PRF1='5551', GZMA='3001', CD274='29126')
dat <- with_assay_data(samples, features, normalized = TRUE, batch = "sex")
dat <- with_assay_data(samples, features, normalized = TRUE,
                       batch = c("sex", "RIN"), normalized = TRUE)
dat <- with_assay_data(samples, features, normalized = TRUE,
                       batch = c("sex", "RIN"), main = "treatment")
}
\seealso{
Other API: \code{\link{fetch_assay_score.FacileDataSet}},
  \code{\link{fetch_custom_sample_covariates.FacileDataSet}},
  \code{\link{fetch_sample_covariates}},
  \code{\link{fetch_sample_statistics.FacileDataSet}},
  \code{\link{fetch_samples.FacileDataSet}},
  \code{\link{filter_features.FacileDataSet}},
  \code{\link{filter_samples.FacileDataSet}},
  \code{\link{organism.FacileDataSet}},
  \code{\link{samples.FacileDataSet}}
}
\concept{API}
