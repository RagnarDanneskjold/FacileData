% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/logging.R
\name{flog}
\alias{flog}
\title{Generates a logging message using glue and crayon, with some bells/whistles.}
\usage{
flog(..., level = "info", ns = NULL, session = NULL,
  file = stderr(), sep = "", fill = FALSE, labels = NULL,
  append = FALSE, newline = !is.null(file))
}
\arguments{
\item{...}{the string elements to pass into `glue::glue()`}

\item{level}{the "firing level" of this message. Defaults to "info"}

\item{ns}{(namespace) if included, then the message checks the
namespace-specific logging priority}

\item{session, file, sep, fill, labels, append}{sent to [base::cat()]}

\item{newline}{If `TRUE`, appends a `\n` to the message. By default, this
is `TRUE` when `file` is not `NULL`.}
}
\value{
invisibly returns the text generated in the logging message.
}
\description{
Like other logging approaches, each message created with this function is
assigned a `level` (priority). If the current logging level, which is
returned from a call to `flog_level` (ostensibly determenied by the value
of the `"facile.log.level(.*?)"` option) is less than or equal to level of
this message, then the message will be generated and sent to `file`.
You can include a `namespace` for the message to provide a namespace-specific
level/priority hierarchy.
}
\details{
Conveninece wrapper functions are provided for each logging level, ie.
call `fwarn("message")` instead of flog("message", level = "warn")`. Also,
each facile* package provides its own `flog()` function which sets the
namespace `ns` parameter to default to a package-specific namespace so you
can control logging at the different package level.
}
\section{crayon}{

Glue lets you put cayon functions in `{}` to stylize output. For instance,
you can make "bold and red" the color red and also bold, like so:

```r
flog("This is {red}{bold}bold and red{reset}, right?")
```

Nice! It would be *cooler* if we could make it a bit more terse, like so:

```r
flog("This is rb`bold and red`, right?")
```

Colors:

* b: blue
* c: cyan
* g: green
* k: black
* m: magenta
* r: red
* y: yellow

Styles:

* i: italic
* s: strong (bold)
* S: striketthrough
* u: underline
}

